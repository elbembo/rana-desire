{"version":3,"sources":["BooksAPI.js","ShelfBotton.js","BookCard.js","SearchBox.js","BookShelf.js","BookInfo.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","ShelfBotton","props","react_default","a","createElement","className","onChange","e","target","value","defaultValue","disabled","BookCard","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","shelfStylr","currentlyReading","lable","color","wantToRead","read","inherits","createClass","key","imageLinks","react_router_dom","to","style","width","height","backgroundImage","thumbnail","replace","searchOn","background","src_ShelfBotton","title","authors","map","author","index","display","rel","href","Component","SearchBox","state","handleSearchChange","console","log","BooksAPI","error","setState","noti","sraechTermUpdate","_this2","currentTerm","_this3","type","placeholder","currentBooks","filter","b","src_BookCard","BookShelf","Child","margin","dir","subtitle","src","alt","border","categories","split","join","publisher","publishedDate","categorie","pageCount","aria-label","starts","ret","averageRating","i","stars","star","ratingsCount","description","BookInfo","bookId","match","params","onClick","history","goBack","React","BooksApp","isLoading","myBooks","term","snackbar","show","msg","refreshHome","catch","showSnackbar","setTimeout","searchTerm","bookShelfChanger","react_router","path","component","render","src_SearchBox","exact","src_BookShelf","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","src_App","document","getElementById","URL","process","origin","addEventListener","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.99d958a4.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\n\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nconst ShelfBotton = (props) => {\r\n    const shelfChangeHandle = e => {\r\n\r\n        (props.onChange) && props.onChange(props.book, e.target.value)\r\n    }\r\n    return (\r\n        <div className=\"book-shelf-changer\">\r\n            <select onChange={shelfChangeHandle} defaultValue={props.book.shelf ? props.book.shelf : 'none'}>\r\n                <option value=\"move\" disabled  >Move to...</option>\r\n                <option value=\"currentlyReading\">Currently Reading</option>\r\n                <option value=\"wantToRead\">Want to Read</option>\r\n                <option value=\"read\">Read</option>\r\n                <option value=\"none\">None</option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\nShelfBotton.propTypes = {\r\n    book: PropTypes.object,\r\n    onChange: PropTypes.func\r\n}\r\nexport default ShelfBotton\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\nimport ShelfBotton from './ShelfBotton'\r\n\r\nexport class BookCard extends Component {\r\n    shelfStylr = {\r\n        currentlyReading: {\r\n            lable: 'Currently Reading',\r\n            color: '#4caf50'\r\n        },\r\n        wantToRead: {\r\n            lable: 'Want To Read',\r\n            color: '#ffeb3b'\r\n        },\r\n        read: {\r\n            lable: 'Read',\r\n            color: '#ef3e3e'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.book.imageLinks) {\r\n            return <div className=\"lds-dual-ring\"></div>\r\n        }\r\n        return (\r\n\r\n            (this.props.book) &&\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    \r\n\r\n                    <Link to={`/info/${this.props.book.id}`} >\r\n                        <div className=\"book-cover\" style={\r\n                            /*\r\n                            * use replace function to avoid mixed content warnning from the browser \r\n                            */\r\n                            {\r\n                                width: 128,\r\n                                height: 192,\r\n                                backgroundImage: `url(${this.props.book.imageLinks.thumbnail.replace(/^http:\\/\\//i, 'https://')})`\r\n                            }}>\r\n\r\n                        </div>\r\n                        <div className=\"book-cover-overlay\" ><span>More&nbsp;info</span></div>\r\n                    </Link>\r\n                    {\r\n                        /*\r\n                        * use this.props.searchOn to make the lable only appear in search page\r\n                        */\r\n                        this.props.book.shelf && this.props.searchOn ? \r\n                        <span className=\"shelf-lable\" style={{\r\nbackground : this.shelfStylr[this.props.book.shelf].color\r\n                        }}>{\r\n                            this.shelfStylr[this.props.book.shelf].lable\r\n                            }</span> : ''\r\n                    }\r\n                    <ShelfBotton onChange={this.props.onChange} book={this.props.book} />\r\n                </div>\r\n                <div className=\"book-title\">{this.props.book.title}</div>\r\n                <div className=\"book-authors\">\r\n                    {(this.props.book.authors) && this.props.book.authors.map((author, index) =>\r\n                    (\r\n                        <span key={index} style={{ display: \"block\" }}><i>{author}</i></span>\r\n                    )\r\n                    )}\r\n                </div>\r\n                <a className='read-now' target='_blank' rel=\"noopener noreferrer\" href={`https://www.google.com.eg/books/edition/_/${this.props.book.id}?hl=en&gbpv=1`}>\r\n                    Read now\r\n                </a>\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\nBookCard.propTypes = {\r\n    book: PropTypes.object,\r\n    onChange: PropTypes.func\r\n}\r\nexport default BookCard\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport BookCard from './BookCard'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class SearchBox extends Component {\r\n    state = {\r\n        books: [],\r\n    }\r\n    componentDidMount() {\r\n        (this.props.currentTerm && (this.props.currentTerm !== '')) && BooksAPI.search(this.props.currentTerm).then(books => {\r\n            (books.length > 0) && this.setState({\r\n                books\r\n            })\r\n        })\r\n    }\r\n\r\n    handleSearchChange = (e) => {\r\n        console.log(e.target.value);\r\n        (e.target.value !== '') ? BooksAPI.search(e.target.value).then(books => {\r\n            if (!books.error) {\r\n                this.setState({\r\n                    books\r\n                })\r\n            } else {\r\n                this.setState({ books: [] })\r\n                this.props.noti(`No result for \"${e.target.value}\" , try some thing else`)\r\n            }\r\n        }) : this.setState({ books: [] })\r\n        this.props.sraechTermUpdate(e.target.value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to='/'><button className=\"close-search\">Close</button></Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        <input type=\"text\" placeholder=\"Search by title or author\" value={this.props.currentTerm} onChange={this.handleSearchChange} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                        {\r\n                            this.state.books.map(book => {\r\n                                this.props.currentBooks.filter((b) => {\r\n                                    return (b.id === book.id) ? book.shelf = b.shelf : ''\r\n                                })\r\n                                return (\r\n                                    <li key={book.id}>\r\n                                        <BookCard book={book} onChange={this.props.onChange} searchOn={true/* BookCard used by many othe component we pass thi prop only in search component*/} />\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nSearchBox.propTypes = {\r\n    currentBooks: PropTypes.array,\r\n    noti: PropTypes.func,\r\n    currentTerm: PropTypes.string,\r\n    sraechTermUpdate: PropTypes.func,\r\n    onChange: PropTypes.func\r\n}\r\nexport default SearchBox\r\n","import React, { Component } from 'react'\r\nimport BookCard from './BookCard'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class BookShelf extends Component {\r\n    render() {\r\n        const books = (this.props.books) && this.props.books.filter(book => book.shelf === this.props.shelf)\r\n        return (\r\n            <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">{this.props.title}</h2>\r\n                <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">{\r\n                        (this.props.books) && books.map(book =>(\r\n                            <li key={book.id}><BookCard book={book}  onChange={this.props.onChange} /></li>\r\n                        ))\r\n                    }\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nBookShelf.propTypes = {\r\n    shelf: PropTypes.string,\r\n    book: PropTypes.array,\r\n    title: PropTypes.string,\r\n    onChange: PropTypes.func\r\n}\r\nexport default BookShelf\r\n","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nclass BookInfo extends React.Component {\r\n\r\n        state = {\r\n            book: []\r\n        }\r\n    \r\n    componentDidMount() {\r\n        BooksAPI.get(this.props.match.params.id).then(book => {\r\n            this.setState({ book })\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            (this.state.book) && (\r\n                <div>\r\n                    <div className=\"info-books-bar\">\r\n                        <button className=\"close-search\" onClick={() => this.props.history.goBack()}>Close</button>\r\n\r\n                    </div>\r\n                    <Child book={this.state.book} />\r\n                </div>)\r\n        )\r\n    }\r\n}\r\nfunction Child(props) {\r\n    if (!props.book.authors) {\r\n        return <div><div className=\"lds-dual-ring\" style={{display:\"block\",margin:\"0 auto\"}}></div></div>\r\n    }\r\n    /*\r\n    * stars() return with array \r\n    * array item set depend on averageRating\r\n    * of the book , \"on\" if <= averageRating\r\n    * \"off\" if else . then we will call the function\r\n    * to render star element and set class on/off\r\n    */\r\n    const stars = () => {\r\n        let starts = []\r\n        let ret = props.book.averageRating;\r\n        for (let i = 0; i <= 4; i++) {\r\n            if ((i + 1) <= ret) {\r\n                starts[i] = 'on'\r\n            } else {\r\n                starts[i] = 'off'\r\n            }\r\n        }\r\n        return starts \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"bookinfo\">\r\n                <h1 className=\"booktitle\"><span ><span dir=\"ltr\">{props.book.title}</span></span><span className=\"subtitle\"></span></h1>\r\n                <h3 className=\"booktitle\"><span ><span dir=\"ltr\">{props.book.subtitle}</span></span><span className=\"subtitle\"></span></h3>\r\n                <div className=\"bookcover\"><img src={\r\n                    /*\r\n                    * use replace function to avoid mixed content warnning from the browser \r\n                    */\r\n                    props.book.imageLinks.thumbnail.replace(/^http:\\/\\//i, 'https://')\r\n                    } alt=\"Front Cover\" title=\"Front Cover\" width=\"128\" border=\"1\" id=\"summary-frontcover\" ></img></div>\r\n                <div className=\"bookinfo_sectionwrap\">\r\n                    <div>\r\n                        {\r\n                            (props.book.categories) && props.book.authors.map((author, index) => (\r\n                                <a key={index} href={`https://www.google.com/search?tbo=p&tbm=bks&q=inauthor:%22${author.split(' ').join('+')}%22`} className=\"secondary\">\r\n                                    <span dir=\"ltr\">{author}</span><br />\r\n                                </a>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <span dir=\"ltr\">{props.book.publisher}</span>, <span dir=\"ltr\">{(props.book.publishedDate) && props.book.publishedDate}</span> -\r\n                        {\r\n                            (props.book.categories) && props.book.categories.map((categorie, index) => (\r\n                                <a key={index} className=\"secondary\" href={`https://www.google.com.eg/search?tbo=p&tbm=bks&q=subject:%22${categorie}%22&source=gbs_ge_summary_r&cad=0`}>\r\n                                    <span dir=\"ltr\">{categorie}</span>\r\n                                </a>\r\n                            ))\r\n                        }\r\n                        - <span dir=\"ltr\">{props.book.pageCount} pages</span></div>\r\n                    <div>\r\n                        <a href={`https://books.google.com.eg/books?id=${props.book.id}&dq=rowling&sitesec=reviews`} aria-label=\"Average user rating - 18820 stars\">\r\n                            {\r\n                                stars().map((star, index) => (\r\n                                    (index === 0) ? \r\n                                    <span key={index} className={`gb-star-${star} goog-inline-block rating`}>\r\n                                        <span className=\"value-title\" title={props.book.averageRating}>\r\n                                        </span>\r\n                                    </span> : <span key={index} className={`gb-star-${star} goog-inline-block`}> </span>\r\n\r\n                                ))\r\n                            }\r\n                        </a>\r\n                        <span className=\"num-ratings\">\r\n                            <a href={`https://books.google.com.eg/books?id=${props.book.id}&dq=rowling&sitesec=reviews`} className=\"sbs-count secondary\">\r\n                                <span className=\"count\">{props.book.ratingsCount}</span> Reviews</a>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div id=\"synopsis\">\r\n                    <div id=\"synopsis-window\" >\r\n                        <div id=\"synopsistext\" dir=\"ltr\" className=\"sa\"><b>{props.book.description}</b></div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"search_box_wrapper\">\r\n                    <a className='read-now' target='_blank' rel=\"noopener noreferrer\" href={`https://www.google.com.eg/books/edition/_/${props.book.id}?hl=en&gbpv=1`}>\r\n                        Read now\r\n                    </a></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default BookInfo\r\n","import React from 'react'\r\nimport { Route } from 'react-router'\r\nimport { Link, Switch } from 'react-router-dom'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport SearchBox from './SearchBox'\r\nimport BookShelf from './BookShelf'\r\nimport BookInfo from './BookInfo'\r\n\r\nclass BooksApp extends React.Component {\r\n\r\n    state = {\r\n      isLoading: false,\r\n      myBooks: [],\r\n      term: '',\r\n      snackbar: {\r\n        show: false,\r\n        msg: 'd'\r\n      }\r\n    }\r\n\r\n  \r\n  /*\r\n  * refreshHome get all user's book to home screen\r\n  */\r\n  refreshHome = () => {\r\n    this.setState({ isLoading: true })\r\n    BooksAPI.getAll()\r\n      .then((myBooks) => {\r\n        this.setState(() => ({\r\n          myBooks\r\n        }))\r\n        this.setState({ isLoading: false })\r\n      }).catch((e) => {\r\n        this.setState({ isLoading: false })\r\n        this.showSnackbar('Somthing wrong , try again')\r\n        console.error('Error:', e)\r\n      })\r\n  }\r\n  /*\r\n  * we do the mounting of the children components into the DOM\r\n  */\r\n  componentDidMount() {\r\n    this.refreshHome()\r\n  }\r\n  /*\r\n  * showSnackbar() is a nice way to tell the\r\n  * user whats happend in action , inspired by Android toast notifaction \r\n  */\r\n  showSnackbar = (msg) => {\r\n    this.setState({ snackbar: { show: true, msg } });\r\n    setTimeout(() => {\r\n      this.setState({ snackbar: { show: false, msg: '' } });\r\n    }, 3000);\r\n  }\r\n  /*\r\n  * searchTerm() . hold what the user type \r\n  * in search bar so if he back to search \r\n  * page see what he was looking before\r\n  */\r\n  searchTerm = (term) => {\r\n    this.setState({ term })\r\n  }\r\n  bookShelfChanger = (book, shelf) => {\r\n    this.setState({ isLoading: true })\r\n    BooksAPI.update(book, shelf)\r\n      .then(() => {\r\n        this.refreshHome()\r\n      }).then(()=>{\r\n        this.showSnackbar('Book shelf updated')\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Switch>\r\n          {/* https://reactrouter.com/web/example/url-params */}\r\n          <Route path='/info/:id' component={BookInfo} />\r\n        </Switch>\r\n        <Route path=\"/search\" render={() => (\r\n          <SearchBox onChange={this.bookShelfChanger} sraechTermUpdate={this.searchTerm} currentTerm={this.state.term} noti={this.showSnackbar} currentBooks={this.state.myBooks} />\r\n        )} />\r\n        <Route exact path=\"/\" render={() => (\r\n          <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>Rana Desire <span> for the one who i loved and makes me love to read</span></h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <BookShelf shelf=\"currentlyReading\" books={this.state.myBooks} title=\"Currently Reading\" onChange={this.bookShelfChanger} />\r\n                <BookShelf shelf=\"wantToRead\" books={this.state.myBooks} title=\"Want to Read\" onChange={this.bookShelfChanger} />\r\n                <BookShelf shelf=\"read\" books={this.state.myBooks} title=\"Read\" onChange={this.bookShelfChanger} />\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n\r\n              <Link to='/search' ><button>Add a book</button></Link>\r\n            </div>\r\n\r\n          </div>\r\n        )} />\r\n        {/* https://www.w3schools.com/howto/howto_js_snackbar.asp */}\r\n        <div id=\"snackbar\" className={ this.state.snackbar.show ? 'show' : 'hide' }>{ this.state.snackbar.msg }</div>\r\n        <div id=\"loading\" className={ this.state.isLoading ? 'show' : '' } >\r\n          <div className=\"lds-dual-ring\"></div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}